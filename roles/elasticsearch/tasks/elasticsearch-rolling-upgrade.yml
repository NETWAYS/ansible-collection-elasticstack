# Ansible
#
# Rolling Upgrade of Elasticsearch with security on
# Source from: author: Jeff Steinmetz, @jeffsteinmetz; Bin Li, @holysoros
# Modifications: author: Daniel Neuberger @netways.de
# More modifications: NETWAYS Professional Services GmbH
# latest tested with Ansible 2.9 and later

---
#- name: Elasticsearch rolling upgrade
#  hosts: elasticsearch_{{ env }}
#  become: true
#  serial: 1
#  vars_files:
#    - vars/elasticsearch/elasticsearch-{{ env }}_secrets.yml
#  vars:
#    es_disable_allocation:  '{ "persistent": { "cluster.routing.allocation.enable": "none" }}'
#    es_enable_allocation: '{ "persistent": { "cluster.routing.allocation.enable": null }}'
#    es_http_port: 9200
#    es_transport_port: 9300
#    #desired version to upgrade to: 7.10.2
#    es_version: '8.5.3'
#
#  tasks:
      # this first step is a overkill, but here
      # in case the upgrade was cancelled by user mid playbook run
- name: Make sure elasticsearch service is running
  ansible.builtin.service:
    name: elasticsearch
    enabled: yes
    state: started
  register: response
  become: true

- name: Wait for elasticsearch node to come back up if it was stopped
  ansible.builtin.wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: "{{ es_transport_port }}"
    delay: 45
  when: response.changed | bool

- name: Check current version
  ansible.builtin.uri:
    url: https://localhost:{{ es_http_port }}
    method: GET
    user: elastic
    password: "{{ es_api_basic_auth_password }}"
    validate_certs: no
  register: version_found
  retries: 10
  delay: 10

- name: Display Current Elasticsearch Version
  ansible.builtin.debug:
    var: version_found.json.version.number

  # this step is key!!!  Don't restart more nodes
  # until all shards have completed recovery
- name: Wait for cluster health to return to green
  ansible.builtin.uri:
    url: https://localhost:{{ es_http_port }}/_cluster/health
    method: GET
    user: elastic
    password: "{{ es_api_basic_auth_password }}"
    validate_certs: no
  register: response
  until: "response.json.status == 'green'"
  retries: 50
  delay: 30
  # when: version_found.json.version.number !=  '{{ es_version }}'


- name: Disable shard allocation for the cluster
  ansible.builtin.uri:
    url: https://localhost:{{ es_http_port }}/_cluster/settings
    method: PUT
    body: '{{ es_disable_allocation }}'
    body_format: json
    user: elastic
    password: "{{ es_api_basic_auth_password }}"
    validate_certs: no
  #when: version_found.json.version.number != '{{ es_version }}'

- name: Stop non essential indexing to speed up shard recovery
  ansible.builtin.uri:
    url: https://localhost:{{ es_http_port }}/_flush
    method: POST
    user: elastic
    password: "{{ es_api_basic_auth_password }}"
    validate_certs: no
  failed_when: false


- name: Shutdown elasticsearch service
  ansible.builtin.service:
    name: elasticsearch
    enabled: yes
    state: stopped
  become: true

# do an "apt-get update", to ensure latest package lists
- name: Apt-get update
  ansible.builtin.apt:
    update-cache: yes
  changed_when: false

# get a list of packages that have updates
- name: Get list of pending upgrades
  ansible.builtin.command: apt-get --simulate dist-upgrade
  register: apt_simulate
  changed_when: false

# pick out list of pending updates from command output. This essentially
# takes the above output from "apt-get --simulate dist-upgrade", and
# pipes it through "cut -f2 -d' ' | sort"
- name: Parse apt-get output to get list of changed packages
  ansible.builtin.set_fact:
    updates: '{{ apt_simulate.stdout_lines | select("match", "^Inst ") | list | splitpart(1, " ") | list | sort }}'
  changed_when: false

# tell user about packages being updated
- name: Show pending updates
  ansible.builtin.debug:
    var: updates
  when: updates.0 is defined

# request manual ack before proceeding with package upgrade
- name: Wait for interaction
  ansible.builtin.pause:
  when: updates.0 is defined

# if a new kernel is incoming, remove old ones to avoid full /boot
- name: Apt-get autoremove
  ansible.builtin.command: apt-get -y autoremove
  when: '"Inst linux-image-" in apt_simulate.stdout'
  changed_when: false

# do the actual apt-get dist-upgrade
- name: Apt-get dist-upgrade
  ansible.builtin.apt:
    upgrade: dist # upgrade all packages to latest version

- name: Start elasticsearch
  ansible.builtin.service:
    name: elasticsearch
    enabled: yes
    state: started
    #when: version_found.json.version.number != '{{ es_version }}'
  become: true

- name: Wait for elasticsearch node to come back up if it was stopped
  ansible.builtin.wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: "{{ es_transport_port }}"
    delay: 30

- name: Confirm the node joins the cluster # noqa: risky-shell-pipe
  ansible.builtin.shell: >
    if test -n "$(ps -p $$ | grep bash)"; then set -o pipefail; fi;
    curl
    -k
    -u elastic:{{ es_api_basic_auth_password }}
    -s
    -m 2
    'https://localhost:9200/_cat/nodes?h=name'
    | grep
    -E
    '^{{ ansible_fqdn }}$'
  register: result
  until: result.rc == 0
  retries: 200
  delay: 3
  changed_when: false
  #when: version_found.json.version.number != '{{ es_version }}'

- name: Enable shard allocation for the cluster
  ansible.builtin.uri:
    url: https://localhost:{{ es_http_port }}/_cluster/settings
    method: PUT
    body: '{{ es_enable_allocation }}'
    body_format: json
    user: elastic
    password: "{{ es_api_basic_auth_password }}"
    validate_certs: no
  register: response
  # next line is boolean not string, so no quotes around true
  # use python truthiness
  until: "response.json.acknowledged == true"
  retries: 5
  delay: 30
  #when: version_found.json.version.number != es_version

- name: Wait for cluster health to return to yellow or green
  ansible.builtin.uri:
    url: https://localhost:{{ es_http_port }}/_cluster/health
    method: GET
    user: elastic
    password: "{{ es_api_basic_auth_password }}"
    validate_certs: no
  register: response
  until: "response.json.status == 'yellow' or response.json.status == 'green'"
  retries: 5
  delay: 30
