---

- name: Install packages for security tasks
  ansible.builtin.package:
    name:
      - unzip
      - python3-cryptography
      - openssl
  tags:
    - certificates
    - renew_ca
    - renew_kibana_cert
    - renew_es_cert

- name: Set elasticstack_ca variable if not already done by user
  ansible.builtin.set_fact:
    elasticstack_ca: "{{ groups[elasticsearch_group_name][0] }}"
  when: elasticstack_ca is undefined
  tags:
    - certificates
    - renew_ca
    - renew_es_cert

- name: Ensure ca exists
  ansible.builtin.stat:
    path: "{{ elasticstack_ca_dir }}/elastic-stack-ca.p12"
  register: elasticstack_ca_exists
  when: inventory_hostname == elasticstack_ca

- name: Get CA informations
  cert_info:
    path: "{{ elasticstack_ca_dir }}/elastic-stack-ca.p12"
    passphrase: "{{ elasticstack_ca_pass | default(omit, true) }}"
  register: elasticstack_ca_infos
  when: inventory_hostname == elasticstack_ca and elasticstack_ca_exists.stat.exists | bool

- name: Set the ca expiration date in days
  ansible.builtin.set_fact:
    elasticstack_ca_expiration_days: "{{ ((elasticstack_ca_infos.not_valid_after | to_datetime()) - (ansible_date_time.date | to_datetime('%Y-%m-%d'))).days }}"
  when: inventory_hostname == elasticstack_ca and elasticstack_ca_infos.skipped is not defined

- name: Set ca will expire soon to true
  ansible.builtin.set_fact:
    elasticstack_ca_will_expire_soon: true
  when: >
    inventory_hostname == elasticstack_ca and
    elasticstack_ca_expiration_days is defined and
    elasticstack_ca_expiration_days | int <= elasticstack_ca_expiration_buffer | int

- name: Print the ca renew message
  ansible.builtin.debug:
    msg: |
      Your ca will expire in {{ elasticstack_ca_expiration_days }} days.
      Ansible will renew it and all elastic stack certificates
  when: >
    inventory_hostname == elasticstack_ca and
    elasticstack_ca_expiration_days is defined and
    elasticstack_ca_expiration_days | int <= elasticstack_ca_expiration_buffer | int

- name: Stop Logstash
  ansible.builtin.service:
    name: logstash
    state: stopped
  with_items: "{{ groups['logstash'] }}"
  delegate_to: "{{ item }}"
  when:
    - "'renew_ca' in ansible_run_tags or elasticstack_ca_will_expire_soon | bool"
    - groups['logstash'] is defined

- name: Backup ca directory on elasticsearch ca host then remove
  when: (inventory_hostname == elasticstack_ca) and ('renew_ca' in "ansible_run_tags" or elasticstack_ca_will_expire_soon | bool)
  tags:
    - renew_ca
  block:
    - name: Check if ca directory exists on elasticsearch ca host
      ansible.builtin.stat:
        path: "{{ elasticstack_ca_dir }}"
      register: elasticsearch_check_ca_path

    - name: Move the ca directory on elasticsearch ca host
      ansible.builtin.copy:
        src: "{{ elasticstack_ca_dir }}"
        dest: "{{ elasticstack_ca_dir }}_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
        remote_src: true
      when: elasticsearch_check_ca_path.stat.exists
      register: elasticsearch_move_ca_directory

    - name: Remove ca directory on elasticsearch ca host
      ansible.builtin.file:
        path: "{{ elasticstack_ca_dir }}"
        state: absent
      when: elasticsearch_move_ca_directory.changed

    - name: Check the existance of ca on Ansible controler
      ansible.builtin.stat:
        path: /tmp/ca.crt
      register: elasticsearch_check_temporary_ca
      delegate_to: localhost

    - name: Move temporary ca file on Ansible controler
      ansible.builtin.copy:
        src: /tmp/ca.crt
        dest: "/tmp/ca.crt_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
      when: elasticsearch_check_temporary_ca.stat.exists
      delegate_to: localhost
      register: elasticsearch_move_ca_file

    - name: Remove temporary ca file on Ansible controler
      ansible.builtin.file:
        path: /tmp/ca.crt
        state: absent
      when: elasticsearch_move_ca_file.changed
      delegate_to: localhost

- name: Ensure elasticsearch certificate exists
  ansible.builtin.stat:
    path: "/etc/elasticsearch/certs/{{ ansible_hostname }}.p12"
  register: elasticsearch_cert_exists

- name: Get the elasticsearch certificate expiration date
  cert_info:
    path: "/etc/elasticsearch/certs/{{ ansible_hostname }}.p12"
    passphrase: "{{ elasticsearch_tls_key_passphrase | default(omit, true) }}"
  register: elasticsearch_cert_infos
  when: elasticsearch_cert_exists.stat.exists | bool

- name: Set the elasticsearch certificate expiration date in days
  ansible.builtin.set_fact:
    elasticsearch_cert_expiration_days: "{{ ((elasticsearch_cert_infos.not_valid_after | to_datetime()) - (ansible_date_time.date | to_datetime('%Y-%m-%d'))).days }}"
  when: elasticsearch_cert_infos.skipped is not defined

- name: Set elasticsearch certificate will expire soon to true
  ansible.builtin.set_fact:
    elasticsearch_cert_will_expire_soon: true
  when: elasticsearch_cert_expiration_days is defined and elasticsearch_cert_expiration_days | int <= elasticsearch_cert_expiration_buffer | int

- name: Print the elasticsearch certificate renew message
  ansible.builtin.debug:
    msg: |
      Your elasticsearch certificate will expire in {{ elasticsearch_cert_expiration_days }} days.
      Ansible will renew it.
  when: elasticsearch_cert_expiration_days is defined and elasticsearch_cert_expiration_days | int <= elasticsearch_cert_expiration_buffer | int

- name: Backup elasticsearch certs on node then remove
  when: "'renew_es_cert' in ansible_run_tags or 'renew_ca' in ansible_run_tags or elasticsearch_cert_will_expire_soon | bool"
  tags:
    - renew_ca
    - renew_es_cert
  block:
    - name: Check if cert directory exists on elasticsearch node
      ansible.builtin.stat:
        path: /etc/elasticsearch/certs
      register: elasticsearch_check_cert_path

    - name: Move cert directory on elasticsearch node
      ansible.builtin.copy:
        src: /etc/elasticsearch/certs
        dest: "/etc/elasticsearch/certs_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
        remote_src: true
      when: elasticsearch_check_cert_path.stat.exists
      register: elasticsearch_move_cert_directory

    - name: Remove cert directory on elasticsearch node
      ansible.builtin.file:
        path: /etc/elasticsearch/certs
        state: absent
      when: elasticsearch_move_cert_directory.changed

- name: Backup elasticsearch certs on elasticstack_ca host then remove
  when: "'renew_es_cert' in ansible_run_tags or 'renew_ca' in ansible_run_tags or elasticsearch_cert_will_expire_soon | bool"
  delegate_to: "{{ elasticstack_ca }}"
  tags:
    - renew_ca
    - renew_es_cert
  block:
    - name: Check if cert file exists on elasticstack_ca host
      ansible.builtin.stat:
        path: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}.p12"
      register: elasticsearch_check_cert_file

    - name: Move cert file on elasticstack_ca host
      ansible.builtin.copy:
        src: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}.p12"
        dest: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}.p12_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
        remote_src: true
      when: elasticsearch_check_cert_file.stat.exists
      register: elasticsearch_move_cert_file

    - name: Remove cert file on elasticstack_ca host
      ansible.builtin.file:
        path: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}.p12"
        state: absent
      when: elasticsearch_move_cert_file.changed

- name: Backup elasticsearch cert on localhost then remove
  when: "'renew_es_cert' in ansible_run_tags or 'renew_ca' in ansible_run_tags or elasticsearch_cert_will_expire_soon | bool"
  delegate_to: localhost
  tags:
    - renew_es_cert
    - renew_ca
  block:
    - name: Check the existance of cert on Ansible controler
      ansible.builtin.stat:
        path: /tmp/{{ ansible_hostname }}.p12
      register: elasticsearch_check_temporary_cert

    - name: Move temporary cert on Ansible controler
      ansible.builtin.copy:
        src: /tmp/{{ ansible_hostname }}.p12
        dest: "/tmp/{{ ansible_hostname }}.p12_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
      when: elasticsearch_check_temporary_cert.stat.exists
      register: elasticsearch_move_cert_file

    - name: Remove temporary cert on Ansible controler
      ansible.builtin.file:
        path: /tmp/{{ ansible_hostname }}.p12
        state: absent
      when: elasticsearch_move_cert_file.changed

- name: Create directory for Elasticsearch CA
  ansible.builtin.file:
    path: "{{ elasticstack_ca_dir }}"
    owner: root
    group: elasticsearch
    mode: 0700
    state: directory
  tags:
    - certificates
    - renew_ca
    - renew_es_cert

- name: Import Tasks elasticsearch-keystore.yml
  ansible.builtin.import_tasks: elasticsearch-keystore.yml

- name: Create ca and certificates on elasticstack_ca host
  when: inventory_hostname == elasticstack_ca
  tags:
    - certificates
    - renew_ca
    - renew_es_cert
  block:
    - name: Configure ca on elasticstack_ca host
      ansible.builtin.command: >
        /usr/share/elasticsearch/bin/elasticsearch-certutil ca
        --ca-dn {{ elasticstack_ca_name }}
        --days {{ elasticstack_ca_validity_period }}
        --pass {{ elasticstack_ca_pass }}
        --out {{ elasticstack_ca_dir }}/elastic-stack-ca.p12
        --silent
      args:
        creates: "{{ elasticstack_ca_dir }}/elastic-stack-ca.p12"
      no_log: "{{ elasticstack_no_log }}"

    - name: Create node certificates on elasticstack_ca host
      ansible.builtin.command: >
        /usr/share/elasticsearch/bin/elasticsearch-certutil cert
        --ca {{ elasticstack_ca_dir }}/elastic-stack-ca.p12
        --days {{ elasticsearch_cert_validity_period }}
        --ca-pass {{ elasticstack_ca_pass }}
        --name {{ hostvars[item].ansible_hostname }}
        --ip {{ hostvars[item].ansible_default_ipv4.address | default(hostvars[item].ansible_all_ipv4_addresses[0]) }}
        --dns {{ hostvars[item].ansible_hostname }},{{ hostvars[item].ansible_fqdn }},{{ hostvars[item].inventory_hostname }}
        --pass {{ elasticsearch_tls_key_passphrase }}
        --out {{ elasticstack_ca_dir }}/{{ hostvars[item].ansible_hostname }}.p12
      loop: "{{ groups[elasticsearch_group_name] }}"
      no_log: "{{ elasticstack_no_log }}"
      args:
        creates: "{{ elasticstack_ca_dir }}/{{ hostvars[item].ansible_hostname }}.p12"

    - name: Extract CA certificate on elasticstack_ca host
      ansible.builtin.command: >
        openssl pkcs12 -in {{ elasticstack_ca_dir }}/{{ ansible_hostname }}.p12
        -cacerts -nokeys -out {{ elasticstack_ca_dir }}/ca.crt
        -password pass:{{ elasticsearch_tls_key_passphrase }}
      args:
        creates: "{{ elasticstack_ca_dir }}/ca.crt"
      no_log: "{{ elasticstack_no_log }}"

- name: Fetch ca certificate from ca host to Ansible controller
  ansible.builtin.fetch:
    src: "{{ elasticstack_ca_dir }}/ca.crt"
    dest: /tmp/ca.crt
    flat: yes
  when: inventory_hostname == elasticstack_ca
  tags:
    - certificates
    - renew_ca
    - renew_es_cert

- name: Fetch certificate from ca host to Ansible controller
  ansible.builtin.fetch:
    src: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}.p12"
    dest: "/tmp/{{ ansible_hostname }}.p12"
    flat: yes
  delegate_to: "{{ elasticstack_ca }}"
  tags:
    - certificates
    - renew_ca
    - renew_es_cert

- name: Create certificate directory
  ansible.builtin.file:
    state: directory
    path: /etc/elasticsearch/certs
    owner: root
    group: elasticsearch
    mode: 0750
  tags:
    - certificates
    - renew_ca
    - renew_es_cert

- name: Copy the ca certificate to elasticsearch nodes
  ansible.builtin.copy:
    src: /tmp/ca.crt
    dest: "/etc/elasticsearch/certs"
    owner: root
    group: elasticsearch
    mode: 0640
  notify:
    - Restart Elasticsearch
    - Restart kibana if available for elasticsearch certificates
  tags:
    - certificates
    - renew_ca
    - renew_es_cert
  ignore_errors: "{{ ansible_check_mode }}"

- name: Copy the certificate to elasticsearch nodes
  ansible.builtin.copy:
    src: "/tmp/{{ ansible_hostname }}.p12"
    dest: "/etc/elasticsearch/certs"
    owner: root
    group: elasticsearch
    mode: 0640
  notify:
    - Restart Elasticsearch
    - Restart kibana if available for elasticsearch certificates
  tags:
    - certificates
    - renew_ca
    - renew_es_cert
  ignore_errors: "{{ ansible_check_mode }}"

- name: Start Elasticsearch
  ansible.builtin.service:
    name: elasticsearch
    state: started
    enabled: yes
  register: elasticsearch_freshstart_security

- name: Wait for all instances to start
  ansible.builtin.include_tasks: wait_for_instance.yml
  loop: "{{ groups[elasticsearch_group_name] }}"

- name: Restart if Elasticsearch was already running
  when:
    - not elasticsearch_freshstart.changed | bool
    - not elasticsearch_freshstart_security.changed | bool
  block:
    - name: Force all notified handlers to run at this point, not waiting for normal sync points
      ansible.builtin.meta: flush_handlers
      tags:
        - certificates
        - renew_ca
        - renew_es_cert

    - name: Wait for all instances to start
      ansible.builtin.include_tasks: wait_for_instance.yml
      loop: "{{ groups[elasticsearch_group_name] }}"
      tags:
        - certificates
        - renew_ca
        - renew_es_cert

- name: Check for passwords being set
  ansible.builtin.stat:
    path: "{{ elasticstack_initial_passwords }}"
  delegate_to: "{{ elasticstack_ca }}"
  register: elasticsearch_passwords_file

- name: Setting elasticsearch_http_protocol
  ansible.builtin.set_fact:
    elasticsearch_http_protocol: "https"
  when: elasticsearch_http_security

- name: Check for API with bootstrap password
  ansible.builtin.uri:
    url: "{{ elasticsearch_http_protocol }}://localhost:{{ elasticstack_elasticsearch_http_port }}"
    user: elastic
    password: "{{ elasticsearch_bootstrap_pw }}"
    validate_certs: false
  register: elasticsearch_api_status_bootstrap
  changed_when: false
  no_log: "{{ elasticstack_no_log }}"
  when:
    - not elasticsearch_passwords_file.stat.exists | bool
    - groups[elasticsearch_group_name] | length > 1
  until: elasticsearch_api_status_bootstrap.json.cluster_name is defined
  retries: 5
  delay: 10

# We need this check twice. One to wait for the API to be actually available. And a second time to
# check the actual return code. Should not cause a huge delay.

- name: Check for cluster status with bootstrap password
  ansible.builtin.uri:
    url: "{{ elasticsearch_http_protocol }}://localhost:{{ elasticstack_elasticsearch_http_port }}/_cluster/health?pretty"
    user: elastic
    password: "{{ elasticsearch_bootstrap_pw }}"
    validate_certs: false
  register: elasticsearch_cluster_status_bootstrap
  changed_when: false
  no_log: "{{ elasticstack_no_log }}"
  when:
    - not elasticsearch_passwords_file.stat.exists | bool
    - groups[elasticsearch_group_name] | length > 1
  until: elasticsearch_cluster_status_bootstrap.json.status == "green"
  retries: 5
  delay: 10

- name: Fetch Elastic password # noqa: risky-shell-pipe
  ansible.builtin.shell: >
    if test -n "$(ps -p $$ | grep bash)"; then set -o pipefail; fi;
    grep "PASSWORD elastic" {{ elasticstack_initial_passwords }} |
    awk {' print $4 '}
  register: elasticstack_password
  changed_when: false
  no_log: "{{ elasticstack_no_log }}"
  delegate_to: "{{ elasticstack_ca }}"
  when: elasticsearch_passwords_file.stat.exists | bool

- name: Check for API availability with elastic password
  ansible.builtin.uri:
    url: "{{ elasticsearch_http_protocol }}://localhost:{{ elasticstack_elasticsearch_http_port }}"
    user: elastic
    password: "{{ elasticstack_password.stdout }}"
    validate_certs: false
  register: elasticsearch_api_status
  changed_when: false
  no_log: "{{ elasticstack_no_log }}"
  when:
    - elasticsearch_passwords_file.stat.exists | bool
    - groups[elasticsearch_group_name] | length > 1
  until: elasticsearch_api_status.json.cluster_name is defined
  retries: 20
  delay: 10

- name: Work around low ressources on CI/CD nodes
  when: ansible_virtualization_type == "container" or ansible_virtualization_type == "docker"
  block:
    # Free up some space to let elsticsearch allocate replica in GitHub Action
    - name: Remove cache
      ansible.builtin.command: >
        rm -rf /var/cache/*
      changed_when: false

    - name: Set persistent watermarks to very high values in Docker # noqa: risky-shell-pipe
      ansible.builtin.shell: >
        if test -n "$(ps -p $$ | grep bash)"; then set -o pipefail; fi;
        curl
        -k
        -X PUT
        "{{ elasticsearch_http_protocol }}://elastic:{{ elasticstack_password.stdout }}@localhost:9200/_cluster/settings"
        -H 'Content-Type: application/json' -d
        '
        {
          "persistent": {
            "cluster.routing.allocation.disk.watermark.low": "97%",
            "cluster.routing.allocation.disk.watermark.high": "98%",
            "cluster.routing.allocation.disk.watermark.flood_stage": "99%",
            "cluster.routing.allocation.disk.watermark.flood_stage.frozen": "99%"
          }
        }
        '
      changed_when: false
      no_log: "{{ elasticstack_no_log }}"
      when:
        - elasticstack_password.stdout is defined

# We need this check twice. One to wait for the API to be actually available. And a second time to
# check the actual return code. Should not cause a huge delay.

- name: Check for cluster status with elastic password
  ansible.builtin.uri:
    url: "{{ elasticsearch_http_protocol }}://localhost:{{ elasticstack_elasticsearch_http_port }}/_cluster/health?pretty"
    user: elastic
    password: "{{ elasticstack_password.stdout }}"
    validate_certs: false
  register: elasticsearch_cluster_status
  changed_when: false
  no_log: "{{ elasticstack_no_log }}"
  when:
    - elasticsearch_passwords_file.stat.exists | bool
    - groups[elasticsearch_group_name] | length > 1
  until: elasticsearch_cluster_status.json.status == "green"
  retries: 20
  delay: 10

- name: Leave a file showing that the cluster is set up
  ansible.builtin.template:
    dest: "{{ elasticsearch_initialized_file }}"
    src: elasticsearch_initialized.j2
    owner: root
    group: root
    mode: "0600"

- name: Set var that cluster is set up
  ansible.builtin.set_fact:
    elaticsearch_cluster_set_up: true

- name: Create initial passwords # noqa: risky-shell-pipe
  ansible.builtin.shell: >
    if test -n "$(ps -p $$ | grep bash)"; then set -o pipefail; fi;
    /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto -b >
    {{ elasticstack_initial_passwords }}
  when: inventory_hostname == elasticstack_ca
  no_log: "{{ elasticstack_no_log }}"
  args:
    creates: "{{ elasticstack_initial_passwords }}"

# It would be better to create and set the permissions before generating the passwords. But this would
# break the logic that relies on the file being absent when no passwords are set
- name: Set permissions on passwords file
  ansible.builtin.file:
    path: "{{ elasticstack_initial_passwords }}"
    owner: root
    group: root
    mode: 0600
  when: inventory_hostname == elasticstack_ca

# Maybe make sure that Elasticsearch is using the right protocol http(s) to connect, even in newly setup clusters
