---

- name: Install packages for security tasks
  ansible.builtin.package:
    name:
      - unzip
      - python3-cryptography
      - openssl
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Set elasticstack_ca variable if not already done by user
  ansible.builtin.set_fact:
    elasticstack_ca: "{{ groups[elasticstack_elasticsearch_group_name][0] }}"
  when:
    - elasticstack_ca is undefined
    - groups[elasticstack_elasticsearch_group_name] is defined
  tags:
    - certificates
    - configuration
    - logstash_configuration
    - renew_ca
    - renew_logstash_cert

- name: Ensure logstash certificate exists
  ansible.builtin.stat:
    path: "{{ logstash_certs_dir }}/{{ ansible_hostname }}-ls.p12"
  register: logstash_cert_exists

- name: Get the logstash certificate expiration date
  cert_info:
    path: "{{ logstash_certs_dir }}/{{ ansible_hostname }}-ls.p12"
    passphrase: "{{ logstash_tls_key_passphrase | default(omit, true) }}"
  register: logstash_cert_expiration_date
  when: logstash_cert_exists.stat.exists | bool

- name: Set the logstash certificate expiration date in days
  ansible.builtin.set_fact:
    logstash_cert_expiration_days: "{{ ((logstash_cert_expiration_date.not_valid_after | to_datetime()) - (ansible_date_time.date | to_datetime('%Y-%m-%d'))).days }}"
  when: logstash_cert_expiration_date.skipped is not defined

- name: Set logstash certificate will expire soon to true
  ansible.builtin.set_fact:
    logstash_cert_will_expire_soon: true
  when: logstash_cert_expiration_days is defined and logstash_cert_expiration_days | int <= logstash_cert_expiration_buffer | int

- name: Print the logstash certificate renew message
  ansible.builtin.debug:
    msg: |
      Your logstash certificate will expire in {{ logstash_cert_expiration_days }} days.
      Ansible will renew it.
  when: logstash_cert_expiration_days is defined and logstash_cert_expiration_days | int <= logstash_cert_expiration_buffer | int

- name: Backup logstash certs then remove
  when: "'renew_logstash_cert' in ansible_run_tags or 'renew_ca' in ansible_run_tags"
  tags:
    - renew_ca
    - renew_logstash_cert
    - never
  block:
    - name: Check if cert directory exists on logstash
      ansible.builtin.stat:
        path: "{{ logstash_certs_dir }}"
      register: logstash_check_cert_path

    - name: Move cert directory on logstash
      ansible.builtin.copy:
        src: "{{ logstash_certs_dir }}"
        dest: "{{ logstash_certs_dir }}_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
        remote_src: true
      when: logstash_check_cert_path.stat.exists
      register: logstash_move_cert_directory

    - name: Remove cert directory on logstash
      ansible.builtin.file:
        path: "{{ logstash_certs_dir }}"
        state: absent
      when: logstash_move_cert_directory.changed

- name: Backup logstash certs on elasticstack_ca host then remove
  when: "'renew_logstash_cert' in ansible_run_tags or 'renew_ca' in ansible_run_tags"
  delegate_to: "{{ elasticstack_ca }}"
  tags:
    - renew_ca
    - renew_logstash_cert
    - never
  block:
    - name: Check if cert file exists on elasticstack_ca host
      ansible.builtin.stat:
        path: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}-ls.p12"
      register: logstash_check_cert_file_ca_host

    - name: Move cert file on elasticstack_ca host
      ansible.builtin.copy:
        src: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}-ls.p12"
        dest: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}-ls.p12_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
        remote_src: true
      when: logstash_check_cert_file_ca_host.stat.exists
      register: logstash_move_cert_file_ca_host

    - name: Remove cert file on elasticstack_ca host
      ansible.builtin.file:
        path: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}-ls.p12"
        state: absent
      when: logstash_move_cert_file_ca_host.changed

    - name: Check if cert zip file exists on elasticstack_ca host
      ansible.builtin.stat:
        path: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}-ls.zip"
      register: logstash_check_cert_zip_file_ca_host

    - name: Move cert zip file on elasticstack_ca host
      ansible.builtin.copy:
        src: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}-ls.zip"
        dest: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}-ls.zip_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
        remote_src: true
      when: logstash_check_cert_zip_file_ca_host.stat.exists
      register: logstash_move_cert_zip_file_ca_host

    - name: Remove cert zip file on elasticstack_ca host
      ansible.builtin.file:
        path: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}-ls.zip"
        state: absent
      when: logstash_move_cert_zip_file_ca_host.changed

- name: Backup logstash cert on Ansible controler then remove
  when: "'renew_logstash_cert' in ansible_run_tags or 'renew_ca' in ansible_run_tags"
  delegate_to: localhost
  tags:
    - renew_ca
    - renew_logstash_cert
    - never
  block:
    - name: Check the existance of cert on Ansible controler
      ansible.builtin.stat:
        path: /tmp/{{ ansible_hostname }}-ls.p12
      register: logstash_check_temporary_cert_ansible_controler

    - name: Move temporary cert file on Ansible controler
      ansible.builtin.copy:
        src: /tmp/{{ ansible_hostname }}-ls.p12
        dest: "/tmp/{{ ansible_hostname }}-ls.p12_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
      when: logstash_check_temporary_cert_ansible_controler.stat.exists
      register: logstash_move_cert_file_ansible_controler

    - name: Remove temporary cert file on Ansible controler
      ansible.builtin.file:
        path: /tmp/{{ ansible_hostname }}-ls.p12
        state: absent
      when: logstash_move_cert_file_ansible_controler.changed

    - name: Check the existance of cert zip file on Ansible controler
      ansible.builtin.stat:
        path: /tmp/{{ ansible_hostname }}-ls.zip
      register: logstash_check_temporary_cert_zip_ansible_controler

    - name: Move temporary cert zip file on Ansible controler
      ansible.builtin.copy:
        src: /tmp/{{ ansible_hostname }}-ls.zip
        dest: "/tmp/{{ ansible_hostname }}-ls.zip_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
      when: logstash_check_temporary_cert_zip_ansible_controler.stat.exists
      register: logstash_move_cert_zip_ansible_controler

    - name: Remove temporary cert zip file on Ansible controler
      ansible.builtin.file:
        path: /tmp/{{ ansible_hostname }}-ls.zip
        state: absent
      when: logstash_move_cert_zip_ansible_controler.changed

- name: Create individual certificates for Logstash
  ansible.builtin.command: >
    /usr/share/elasticsearch/bin/elasticsearch-certutil cert
    --days {{ logstash_cert_validity_period }}
    --ca {{ elasticstack_ca_dir }}/elastic-stack-ca.p12
    --ca-pass {{ elasticstack_ca_pass }}
    --name {{ ansible_hostname }}
    --ip {{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}
    --dns {{ ansible_hostname }},{{ ansible_fqdn }},{{ inventory_hostname }}
    --pass {{ logstash_tls_key_passphrase }}
    --out {{ elasticstack_ca_dir }}/{{ ansible_hostname }}-ls.p12
  delegate_to: "{{ elasticstack_ca }}"
  no_log: "{{ elasticstack_no_log }}"
  args:
    creates: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}-ls.p12"
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Fetch certificate from ca host to Ansible controler
  ansible.builtin.fetch:
    src: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}-ls.p12"
    dest: "/tmp/{{ ansible_hostname }}-ls.p12"
    flat: yes
  delegate_to: "{{ elasticstack_ca }}"
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Create certificate directory
  ansible.builtin.file:
    state: directory
    path: "{{ logstash_certs_dir }}"
    owner: root
    group: logstash
    mode: 0750
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Copy the certificate to logstash node
  ansible.builtin.copy:
    src: "/tmp/{{ ansible_hostname }}-ls.p12"
    dest: "{{ logstash_certs_dir }}/{{ ansible_hostname }}-ls.p12"
    owner: root
    group: logstash
    mode: 0640
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Put the certificate in keystore
  ansible.builtin.copy:
    src: "/tmp/{{ ansible_hostname }}-ls.p12"
    dest: "{{ logstash_certs_dir }}/keystore.pfx"
    owner: root
    group: logstash
    mode: 0640
  notify:
    - Restart Logstash
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Create individual PEM certificates for Logstash
  ansible.builtin.command: >
    /usr/share/elasticsearch/bin/elasticsearch-certutil cert
    --days {{ logstash_cert_validity_period }}
    --ca {{ elasticstack_ca_dir }}/elastic-stack-ca.p12
    --ca-pass {{ elasticstack_ca_pass }}
    --name {{ ansible_hostname }}
    --ip {{ ansible_default_ipv4.address }}
    --dns {{ ansible_hostname }},{{ ansible_fqdn }},{{ inventory_hostname }}
    --pass {{ logstash_tls_key_passphrase }}
    --pem
    --out {{ elasticstack_ca_dir }}/{{ ansible_hostname }}-ls.zip
  delegate_to: "{{ elasticstack_ca }}"
  no_log: "{{ elasticstack_no_log }}"
  args:
    creates: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}-ls.zip"
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Fetch PEM certificate from ca host to Ansible controler
  ansible.builtin.fetch:
    src: "{{ elasticstack_ca_dir }}/{{ ansible_hostname }}-ls.zip"
    dest: "/tmp/{{ ansible_hostname }}-ls.zip"
    flat: yes
  delegate_to: "{{ elasticstack_ca }}"
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Copy PEM certificate to logstash node
  ansible.builtin.unarchive:
    src: "/tmp/{{ ansible_hostname }}-ls.zip"
    dest: "{{ logstash_certs_dir }}/"
    owner: root
    group: logstash
    mode: 0640
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Copy certificate locally
  ansible.builtin.copy:
    src: "{{ logstash_certs_dir }}/\
          {{ ansible_hostname }}/\
          {{ ansible_hostname }}.crt"
    dest: "{{ logstash_certs_dir }}/{{ inventory_hostname }}-server.crt"
    owner: root
    group: logstash
    mode: 0640
    remote_src: true
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Copy key locally
  ansible.builtin.copy:
    src: "{{ logstash_certs_dir }}/\
          {{ ansible_hostname }}/\
          {{ ansible_hostname }}.key"
    dest: "{{ logstash_certs_dir }}/{{ inventory_hostname }}.key"
    owner: root
    group: root
    mode: 0640
    remote_src: true
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Create unencrypted Logstash compatible key
  ansible.builtin.command: >
    openssl pkcs8
    -in {{ logstash_certs_dir }}/{{ inventory_hostname }}.key
    -topk8
    -passin pass:{{ logstash_tls_key_passphrase }}
    -out {{ logstash_certs_dir }}/{{ inventory_hostname }}-pkcs8.key
    -nocrypt
  args:
    creates: "{{ logstash_certs_dir }}/{{ inventory_hostname }}-pkcs8.key"
  no_log: "{{ elasticstack_no_log }}"
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Set permissions on Logstash key
  ansible.builtin.file:
    path: "{{ logstash_certs_dir }}/{{ inventory_hostname }}-pkcs8.key"
    owner: root
    group: logstash
    mode: 0660
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Fetch ca certificate from ca host to Ansible controler
  ansible.builtin.fetch:
    src: "{{ elasticstack_ca_dir }}/ca.crt"
    dest: /tmp/ca.crt
    flat: yes
  delegate_to: "{{ elasticstack_ca }}"
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Copy the ca certificate to logstash node
  ansible.builtin.copy:
    src: /tmp/ca.crt
    dest: "{{ logstash_certs_dir }}"
    owner: root
    group: logstash
    mode: 0640
  notify:
    Restart Logstash
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Check the length of logstash user password
  ansible.builtin.fail:
    msg: logstash user password must be at least 6 characters long.
  when: logstash_password | length < 6

- name: Set password hash salt as a fact
  ansible.builtin.set_fact:
    logstash_password_hash_salt: "{{ lookup('password', '/dev/null', chars=['ascii_lowercase', 'digits'], length=logstash_password_hash_salt_length, seed=logstash_password_hash_salt_seed) }}"
  when: logstash_password_hash | bool and inventory_hostname == elasticstack_ca

- name: Fetch Elastic password # noqa: risky-shell-pipe
  ansible.builtin.shell: >
    if test -n "$(ps -p $$ | grep bash)"; then set -o pipefail; fi;
    grep "PASSWORD elastic" {{ elasticstack_initial_passwords }} |
    awk {' print $4 '}
  register: logstash_elasticstack_password
  changed_when: false
  delegate_to: "{{ elasticstack_ca }}"
  no_log: "{{ elasticstack_no_log }}"
  tags:
    - configuration
    - logstash_configuration

- name: Set elasticsearch security-api base url for elasticsearch > 7
  ansible.builtin.set_fact:
    security_api_base_url: "https://{{ hostvars[elasticstack_ca].ansible_default_ipv4.address }}:{{ elasticstack_elasticsearch_http_port }}/_security/"
  when: elasticstack_release | int > 7

- name: Set elasticsearch security-api base url for elasticsearch < 8
  ansible.builtin.set_fact:
    security_api_base_url: "https://{{ hostvars[elasticstack_ca].ansible_default_ipv4.address }}:{{ elasticstack_elasticsearch_http_port }}/_xpack/security/"
  when: elasticstack_release | int < 8

- name: Check for logstash_writer role
  ansible.builtin.uri:
    url: "{{ security_api_base_url }}role/logstash_writer"
    ca_path: "{{ elasticstack_ca_dir }}/ca.crt"
    user: elastic
    password: "{{ logstash_elasticstack_password.stdout }}"
  register: check_logstash_writer_role_response
  delegate_to: "{{ elasticstack_ca }}"
  failed_when: false
  changed_when: false
  no_log: "{{ elasticstack_no_log }}"
  run_once: true

- name: Set logstash_writer_role_present
  ansible.builtin.set_fact:
    logstash_writer_role_present: true
  when: check_logstash_writer_role_response.json.logstash_writer is defined

- name: Put logstash_writer role into Elasticsearch if not present
  ansible.builtin.uri:
    url: "{{ security_api_base_url }}role/logstash_writer"
    ca_path: "{{ elasticstack_ca_dir }}/ca.crt"
    user: elastic
    password: "{{ logstash_elasticstack_password.stdout }}"
    method: PUT
    headers:
      Content-Type: application/json
    body: "{{ lookup('template', 'logstash_writer_role.j2') }}"
    body_format: json
  register: put_logstash_writer_role_response
  when: logstash_writer_role_present is not defined
  delegate_to: "{{ elasticstack_ca }}"
  failed_when: not put_logstash_writer_role_response.json.role.created | bool
  run_once: true

- name: Check for logstash_writer user
  ansible.builtin.uri:
    url: "{{ security_api_base_url }}user/{{ logstash_user }}"
    ca_path: "{{ elasticstack_ca_dir }}/ca.crt"
    user: elastic
    password: "{{ logstash_elasticstack_password.stdout }}"
  register: check_logstash_writer_user_response
  delegate_to: "{{ elasticstack_ca }}"
  failed_when: false
  changed_when: false
  run_once: true

- name: Set logstash_writer_user_present
  ansible.builtin.set_fact:
    logstash_writer_user_present: true
  when: check_logstash_writer_user_response.json.logstash_writer.username is defined and  check_logstash_writer_user_response.json.logstash_writer.username == "logstash_writer"

- name: Put logstash_writer user into Elasticsearch if not present
  ansible.builtin.uri:
    url: "{{ security_api_base_url }}user/{{ logstash_user }}"
    ca_path: "{{ elasticstack_ca_dir }}/ca.crt"
    user: elastic
    password: "{{ logstash_elasticstack_password.stdout }}"
    method: PUT
    headers:
      Content-Type: application/json
    body: "{{ lookup('template', 'logstash_writer_user.j2') }}"
    body_format: json
  register: put_logstash_writer_user_response
  when: logstash_writer_user_present is not defined
  delegate_to: "{{ elasticstack_ca }}"
  run_once: true
  failed_when: not put_logstash_writer_user_response.json.created
