---

- name: Install unzip for certificate handling
  package:
    name: unzip
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Set elasticsearch_ca variable if not already done by user
  set_fact:
    elasticsearch_ca: "{{ groups['elasticsearch'][0] }}"
  when:
    - elasticsearch_ca is undefined
    - groups['elasticsearch'] is defined
  tags:
    - certificates
    - configuration
    - logstash_configuration
    - renew_ca
    - renew_logstash_cert

- name: Ensure logstash certificate exists
  stat:
    path: "{{ logstash_certs_dir }}/{{ ansible_hostname }}-ls.p12"
  register: logstash_cert_exists

- name: Get the logstash certificate expiration date # noqa: risky-shell-pipe
  shell: >-
    if test -v BASH; then set -o pipefail; fi;
    openssl pkcs12
    -in '{{ logstash_certs_dir }}/{{ ansible_hostname }}-ls.p12'
    -nodes
    -passin pass:'{{ logstash_tls_key_passphrase }}' |
    openssl x509
    -noout
    -enddate |
    awk -F'=' '{print $2}'
  register: logstash_cert_expiration_date
  args:
    executable: /bin/bash
  changed_when: false
  no_log: true
  when: logstash_cert_exists.stat.exists | bool

- name: Set the logstash certificate expiration date in days
  set_fact:
    logstash_cert_expiration_days: "{{ ((logstash_cert_expiration_date.stdout | to_datetime('%b %d %H:%M:%S %Y %Z')) - (ansible_date_time.date | to_datetime('%Y-%m-%d'))).days }}"
  when: logstash_cert_expiration_date.skipped is not defined

- name: Set logstash certificate will expire soon to true
  set_fact:
    logstash_cert_will_expire_soon: true
  when: kiban_cert_expiration_days is defined and logstash_cert_expiration_days | int <= logstash_cert_expiration_buffer | int

- name: Print the logstash certificate renew message
  debug:
    msg: |
      Your logstash certificate will expire in {{ logstash_cert_expiration_days }}.
      Ansible will renew it.
  when: logstash_cert_expiration_days is defined and logstash_cert_expiration_days | int <= logstash_expiration_buffer | int

- name: Backup logstash certs then remove
  when: "'renew_logstash_cert' in ansible_run_tags or 'renew_ca' in ansible_run_tags"
  tags:
    - renew_ca
    - renew_logstash_cert
    - never
  block:
    - name: Check if cert directory exists on logstash
      stat:
        path: "{{ logstash_certs_dir }}"
      register: logstash_check_cert_path

    - name: Move cert directory on logstash
      copy:
        src: "{{ logstash_certs_dir }}"
        dest: "{{ logstash_certs_dir }}_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
        remote_src: true
      when: logstash_check_cert_path.stat.exists
      register: logstash_move_cert_directory

    - name: Remove cert directory on logstash
      file:
        path: "{{ logstash_certs_dir }}"
        state: absent
      when: logstash_move_cert_directory.changed

- name: Backup logstash certs on elasticsearch_ca host then remove
  when: "'renew_logstash_cert' in ansible_run_tags or 'renew_ca' in ansible_run_tags"
  delegate_to: "{{ elasticsearch_ca }}"
  tags:
    - renew_ca
    - renew_logstash_cert
    - never
  block:
    - name: Check if cert file exists on elasticsearch_ca host
      stat:
        path: "{{ elastic_ca_dir }}/{{ ansible_hostname }}-ls.p12"
      register: logstash_check_cert_file_ca_host

    - name: Move cert file on elasticsearch_ca host
      copy:
        src: "{{ elastic_ca_dir }}/{{ ansible_hostname }}-ls.p12"
        dest: "{{ elastic_ca_dir }}/{{ ansible_hostname }}-ls.p12_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
        remote_src: true
      when: logstash_check_cert_file_ca_host.stat.exists
      register: logstash_move_cert_file_ca_host

    - name: Remove cert file on elasticsearch_ca host
      file:
        path: "{{ elastic_ca_dir }}/{{ ansible_hostname }}-ls.p12"
        state: absent
      when: logstash_move_cert_file_ca_host.changed

    - name: Check if cert zip file exists on elasticsearch_ca host
      stat:
        path: "{{ elastic_ca_dir }}/{{ ansible_hostname }}-ls.zip"
      register: logstash_check_cert_zip_file_ca_host

    - name: Move cert zip file on elasticsearch_ca host
      copy:
        src: "{{ elastic_ca_dir }}/{{ ansible_hostname }}-ls.zip"
        dest: "{{ elastic_ca_dir }}/{{ ansible_hostname }}-ls.zip_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
        remote_src: true
      when: logstash_check_cert_zip_file_ca_host.stat.exists
      register: logstash_move_cert_zip_file_ca_host

    - name: Remove cert zip file on elasticsearch_ca host
      file:
        path: "{{ elastic_ca_dir }}/{{ ansible_hostname }}-ls.zip"
        state: absent
      when: logstash_move_cert_zip_file_ca_host.changed

- name: Backup logstash cert on Ansible controler then remove
  when: "'renew_logstash_cert' in ansible_run_tags or 'renew_ca' in ansible_run_tags"
  delegate_to: localhost
  tags:
    - renew_ca
    - renew_logstash_cert
    - never
  block:
    - name: Check the existance of cert on Ansible controler
      stat:
        path: /tmp/{{ ansible_hostname }}-ls.p12
      register: logstash_check_temporary_cert_ansible_controler

    - name: Move temporary cert file on Ansible controler
      copy:
        src: /tmp/{{ ansible_hostname }}-ls.p12
        dest: "/tmp/{{ ansible_hostname }}-ls.p12_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
      when: logstash_check_temporary_cert_ansible_controler.stat.exists
      register: logstash_move_cert_file_ansible_controler

    - name: Remove temporary cert file on Ansible controler
      file:
        path: /tmp/{{ ansible_hostname }}-ls.p12
        state: absent
      when: logstash_move_cert_file_ansible_controler.changed

    - name: Check the existance of cert zip file on Ansible controler
      stat:
        path: /tmp/{{ ansible_hostname }}-ls.zip
      register: logstash_check_temporary_cert_zip_ansible_controler

    - name: Move temporary cert zip file on Ansible controler
      copy:
        src: /tmp/{{ ansible_hostname }}-ls.zip
        dest: "/tmp/{{ ansible_hostname }}-ls.zip_{{ ansible_date_time.iso8601_micro }}"
        mode: preserve
      when: logstash_check_temporary_cert_zip_ansible_controler.stat.exists
      register: logstash_move_cert_zip_ansible_controler

    - name: Remove temporary cert zip file on Ansible controler
      file:
        path: /tmp/{{ ansible_hostname }}-ls.zip
        state: absent
      when: logstash_move_cert_zip_ansible_controler.changed

- name: Create individual certificates for Logstash
  command: >
    /usr/share/elasticsearch/bin/elasticsearch-certutil cert
    --ca {{ elastic_ca_dir }}/elastic-stack-ca.p12
    --ca-pass {{ elasticstack_ca_pass }}
    --name {{ ansible_hostname }}
    --ip {{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}
    --dns {{ ansible_hostname }},{{ ansible_fqdn }},{{ inventory_hostname }}
    --pass {{ logstash_tls_key_passphrase }}
    --out {{ elastic_ca_dir }}/{{ ansible_hostname }}-ls.p12
  delegate_to: "{{ elasticsearch_ca }}"
  no_log: true
  args:
    creates: "{{ elastic_ca_dir }}/{{ ansible_hostname }}-ls.p12"
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Fetch certificate from ca host to Ansible controler
  fetch:
    src: "{{ elastic_ca_dir }}/{{ ansible_hostname }}-ls.p12"
    dest: "/tmp/{{ ansible_hostname }}-ls.p12"
    flat: yes
  delegate_to: "{{ elasticsearch_ca }}"
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Create certificate directory
  file:
    state: directory
    path: "{{ logstash_certs_dir }}"
    owner: root
    group: logstash
    mode: 0750
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Copy the certificate to logstash node
  copy:
    src: "/tmp/{{ ansible_hostname }}-ls.p12"
    dest: "{{ logstash_certs_dir }}/keystore.pfx"
    owner: root
    group: logstash
    mode: 0640
  notify:
    - Restart Logstash
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Create individual PEM certificates for Logstash
  command: >
    /usr/share/elasticsearch/bin/elasticsearch-certutil cert
    --ca {{ elastic_ca_dir }}/elastic-stack-ca.p12
    --ca-pass {{ elasticstack_ca_pass }}
    --name {{ ansible_hostname }}
    --ip {{ ansible_default_ipv4.address }}
    --dns {{ ansible_hostname }},{{ ansible_fqdn }},{{ inventory_hostname }}
    --pass {{ logstash_tls_key_passphrase }}
    --pem
    --out {{ elastic_ca_dir }}/{{ ansible_hostname }}-ls.zip
  delegate_to: "{{ elasticsearch_ca }}"
  no_log: true
  args:
    creates: "{{ elastic_ca_dir }}/{{ ansible_hostname }}-ls.zip"
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Fetch PEM certificate from ca host to Ansible controler
  fetch:
    src: "{{ elastic_ca_dir }}/{{ ansible_hostname }}-ls.zip"
    dest: "/tmp/{{ ansible_hostname }}-ls.zip"
    flat: yes
  delegate_to: "{{ elasticsearch_ca }}"
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Copy PEM certificate to logstash node
  unarchive:
    src: "/tmp/{{ ansible_hostname }}-ls.zip"
    dest: "{{ logstash_certs_dir }}/"
    owner: root
    group: logstash
    mode: 0640
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Copy certificate locally
  copy:
    src: "{{ logstash_certs_dir }}/\
          {{ ansible_hostname }}/\
          {{ ansible_hostname }}.crt"
    dest: "{{ logstash_certs_dir }}/{{ inventory_hostname }}-server.crt"
    owner: root
    group: logstash
    mode: 0640
    remote_src: true
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Copy key locally
  copy:
    src: "{{ logstash_certs_dir }}/\
          {{ ansible_hostname }}/\
          {{ ansible_hostname }}.key"
    dest: "{{ logstash_certs_dir }}/{{ inventory_hostname }}.key"
    owner: root
    group: root
    mode: 0640
    remote_src: true
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Create unencrypted Logstash compatible key
  command: >
    openssl pkcs8
    -in {{ logstash_certs_dir }}/{{ inventory_hostname }}.key
    -topk8
    -passin pass:{{ logstash_tls_key_passphrase }}
    -out {{ logstash_certs_dir }}/{{ inventory_hostname }}-pkcs8.key
    -nocrypt
  args:
    creates: "{{ logstash_certs_dir }}/{{ inventory_hostname }}-pkcs8.key"
  no_log: true
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Set permissions on Logstash key
  file:
    path: "{{ logstash_certs_dir }}/{{ inventory_hostname }}-pkcs8.key"
    owner: root
    group: logstash
    mode: 0660
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Fetch ca certificate from ca host to Ansible controler
  fetch:
    src: "{{ elastic_ca_dir }}/ca.crt"
    dest: /tmp/ca.crt
    flat: yes
  delegate_to: "{{ elasticsearch_ca }}"
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Copy the ca certificate to logstash node
  copy:
    src: /tmp/ca.crt
    dest: "{{ logstash_certs_dir }}"
    owner: root
    group: logstash
    mode: 0640
  notify:
    Restart Logstash
  tags:
    - certificates
    - renew_ca
    - renew_logstash_cert

- name: Place logstash_writer role configuration on ca node
  template:
    dest: /root/logstash_writer_role
    src: logstash_writer_role.j2
    owner: root
    group: root
    mode: 0600
  delegate_to: "{{ elasticsearch_ca }}"
  run_once: true

- name: Place logstash_writer user configuration on ca node
  template:
    dest: /root/logstash_writer_user
    src: logstash_writer_user.j2
    owner: root
    group: root
    mode: 0600
  delegate_to: "{{ elasticsearch_ca }}"
  run_once: true

- name: Fetch Elastic password # noqa: risky-shell-pipe
  shell: >
    if test -v BASH; then set -o pipefail; fi;
    grep "PASSWORD elastic" {{ elastic_initial_passwords }} |
    awk {' print $4 '}
  register: logstash_elastic_password
  changed_when: false
  delegate_to: "{{ elasticsearch_ca }}"
  no_log: true
  tags:
    - configuration
    - logstash_configuration

- name: Check for logstash_writer role # noqa: risky-shell-pipe
  shell: >
    if test -v BASH; then set -o pipefail; fi;
    curl --cacert {{ elastic_ca_dir }}/ca.crt
    -u elastic:{{ logstash_elastic_password.stdout }}
    https://{{ hostvars[groups['elasticsearch'][0]].ansible_default_ipv4.address }}:{{ elastic_elasticsearch_http_port }}/_security/role/logstash_writer
    | grep "enabled"
  delegate_to: "{{ elasticsearch_ca }}"
  failed_when: false
  changed_when: false
  register: logstash_writer_role_present
  no_log: true
  run_once: true

# we doubled the task and didn't use a more sophisticated way to just change
# the URI because we expect this task to be removed when ES 7 is out of
# support

- name: Put logstash_writer role into Elasticsearch < 8
  command: >
    curl -T /root/logstash_writer_role --header 'Content-Type: application/json'
    --cacert {{ elastic_ca_dir }}/ca.crt
    -u elastic:{{ logstash_elastic_password.stdout }}
    https://{{ hostvars[groups['elasticsearch'][0]].ansible_default_ipv4.address }}:{{ elastic_elasticsearch_http_port }}/_xpack/security/role/logstash_writer
  delegate_to: "{{ elasticsearch_ca }}"
  changed_when: false
  no_log: true
  run_once: true
  when:
    - logstash_writer_role_present.rc > 0 or logstash_reset_writer_role | bool
    - elastic_release | int < 8

- name: Put logstash_writer role into Elasticsearch > 7
  command: >
    curl -T /root/logstash_writer_role --header 'Content-Type: application/json'
    --cacert {{ elastic_ca_dir }}/ca.crt
    -u elastic:{{ logstash_elastic_password.stdout }}
    https://{{ hostvars[groups['elasticsearch'][0]].ansible_default_ipv4.address }}:{{ elastic_elasticsearch_http_port }}/_security/role/logstash_writer
  delegate_to: "{{ elasticsearch_ca }}"
  changed_when: false
  run_once: true
  no_log: true
  when:
    - logstash_writer_role_present.rc > 0 or logstash_reset_writer_role | bool
    - elastic_release | int > 7

- name: Check for logstash_writer user # noqa: risky-shell-pipe
  shell: >
    if test -v BASH; then set -o pipefail; fi;
    curl --cacert {{ elastic_ca_dir }}/ca.crt
    -u elastic:{{ logstash_elastic_password.stdout }}
    https://{{ hostvars[groups['elasticsearch'][0]].ansible_default_ipv4.address }}:{{ elastic_elasticsearch_http_port }}/_security/user/{{ logstash_user }}
    | grep "enabled"
  delegate_to: "{{ elasticsearch_ca }}"
  failed_when: false
  changed_when: false
  no_log: true
  register: logstash_writer_user_present
  run_once: true

# we doubled the task and didn't use a more sophisticated way to just change
# the URI because we expect this task to be removed when ES 7 is out of
# support

- name: Put logstash_writer user into Elasticsearch < 8
  command: >
    curl -T /root/logstash_writer_user --header 'Content-Type: application/json'
    --cacert {{ elastic_ca_dir }}/ca.crt
    -u elastic:{{ logstash_elastic_password.stdout }}
    https://{{ hostvars[groups['elasticsearch'][0]].ansible_default_ipv4.address }}:{{ elastic_elasticsearch_http_port }}/_xpack/security/user/{{ logstash_user }}
  delegate_to: "{{ elasticsearch_ca }}"
  changed_when: false
  no_log: true
  run_once: true
  when:
    - logstash_writer_user_present.rc > 0
    - elastic_release | int < 8

- name: Put logstash_writer user into Elasticsearch > 7
  command: >
    curl -T /root/logstash_writer_user --header 'Content-Type: application/json'
    --cacert {{ elastic_ca_dir }}/ca.crt
    -u elastic:{{ logstash_elastic_password.stdout }}
    https://{{ hostvars[groups['elasticsearch'][0]].ansible_default_ipv4.address }}:{{ elastic_elasticsearch_http_port }}/_security/user/{{ logstash_user }}
  delegate_to: "{{ elasticsearch_ca }}"
  run_once: true
  no_log: true
  changed_when: false
  when:
    - logstash_writer_user_present.rc > 0
    - elastic_release | int > 7
