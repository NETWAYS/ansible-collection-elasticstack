---

- name: Install unzip for certificate handling
  package:
    name: unzip

- name: Set common password for common certificates
  set_fact:
    logstash_tls_key_passphrase: "{{ elastic_cert_pass }}"
  when: elastic_cert_pass is defined

- name: Set elasticsearch_ca variable if not already done by user
  set_fact:
    elasticsearch_ca: "{{ groups['elasticsearch'][0] }}"
  when: elasticsearch_ca is undefined
  tags:
    - certificates
    - configuration
    - logstash_configuration

- name: create individual certificates for Logstash
  command: >
    /usr/share/elasticsearch/bin/elasticsearch-certutil cert
    --ca {{ elastic_ca_dir }}/elastic-stack-ca.p12
    --ca-pass {{ elastic_ca_pass }}
    --name {{ ansible_hostname }}
    --ip {{ ansible_default_ipv4.address }}
    --dns {{ ansible_hostname }},{{ ansible_fqdn }}
    --pass "{{ logstash_tls_key_passphrase }}"
    --out {{ elastic_ca_dir }}/{{ ansible_hostname }}.p12
  delegate_to: "{{ elasticsearch_ca }}"
  args:
    creates: "{{ elastic_ca_dir }}/{{ ansible_hostname }}.p12"
  tags:
    - certificates

- name: Fetch certificate from ca host to master
  fetch:
    src: "{{ elastic_ca_dir }}/{{ ansible_hostname }}.p12"
    dest: "/tmp/{{ ansible_hostname }}.p12"
    flat: yes
  delegate_to: "{{ elasticsearch_ca }}"
  tags:
    - certificates

- name: Create certificate directory
  file:
    state: directory
    path: /etc/logstash/certs
    owner: root
    group: logstash
    mode: 0750
  tags:
    - certificates

- name: Copy the certificate to actual node
  copy:
    src: "/tmp/{{ ansible_hostname }}.p12"
    dest: "{{ logstash_certs_dir }}/keystore.pfx"
    owner: root
    group: logstash
    mode: 0640
  notify:
    - Restart Logstash
  tags:
    - certificates

- name: create individual PEM certificates for Logstash
  command: >
    /usr/share/elasticsearch/bin/elasticsearch-certutil cert
    --ca {{ elastic_ca_dir }}/elastic-stack-ca.p12
    --ca-pass {{ elastic_ca_pass }}
    --name {{ ansible_hostname }}
    --ip {{ ansible_default_ipv4.address }}
    --dns {{ ansible_hostname }},{{ ansible_fqdn }}
    --pass {{ logstash_tls_key_passphrase }}
    --pem
    --out {{ elastic_ca_dir }}/{{ ansible_hostname }}.zip
  delegate_to: "{{ elasticsearch_ca }}"
  args:
    creates: "{{ elastic_ca_dir }}/{{ ansible_hostname }}.zip"

- name: Fetch certificate from ca host to master
  fetch:
    src: "{{ elastic_ca_dir }}/{{ ansible_hostname }}.zip"
    dest: "/tmp/{{ ansible_hostname }}.zip"
    flat: yes
  delegate_to: "{{ elasticsearch_ca }}"
  tags:
    - certificates

- name: Copy the certificate to actual node
  unarchive:
    src: "/tmp/{{ ansible_hostname }}.zip"
    dest: "{{ logstash_certs_dir }}/"
    owner: root
    group: logstash
    mode: 0640
  tags:
    - certificates

- name: Copy certificate locally
  copy:
    src: "{{ logstash_certs_dir }}/\
          {{ ansible_hostname }}/\
          {{ ansible_hostname }}.crt"
    dest: "{{ logstash_certs_dir }}/{{ inventory_hostname }}-server.crt"
    owner: root
    group: logstash
    mode: 0640
    remote_src: true
  tags:
    - certificates

- name: Copy key locally
  copy:
    src: "{{ logstash_certs_dir }}/\
          {{ ansible_hostname }}/\
          {{ ansible_hostname }}.key"
    dest: "{{ logstash_certs_dir }}/{{ inventory_hostname }}.key"
    owner: root
    group: root
    mode: 0640
    remote_src: true
  tags:
    - certificates

- name: Create Logstash compatible key
  command: >
    openssl pkcs8
    -in {{ logstash_certs_dir }}/{{ inventory_hostname }}.key
    -topk8
    -passin pass:{{ logstash_tls_key_passphrase }}
    -out {{ logstash_certs_dir }}/{{ inventory_hostname }}-pkcs8.key
    -passout pass:{{ logstash_tls_key_passphrase }}
  args:
    creates: "{{ logstash_certs_dir }}/{{ inventory_hostname }}-pkcs8.key"

- name: Set permissions on Logstash key
  file:
    path: "{{ logstash_certs_dir }}/{{ inventory_hostname }}-pkcs8.key"
    owner: root
    group: logstash
    mode: 0660

- name: Fetch ca certificate from ca host to master
  fetch:
    src: "{{ elastic_ca_dir }}/ca.crt"
    dest: /tmp/ca.crt
    flat: yes
  delegate_to: "{{ elasticsearch_ca }}"
  tags:
    - certificates

- name: Copy the ca certificate to actual node
  copy:
    src: /tmp/ca.crt
    dest: /etc/logstash/certs
    owner: root
    group: logstash
    mode: 0640
  notify:
    Restart Logstash
  tags:
    - certificates

- name: Place logstash_writer role configuration on ca node
  template:
    dest: /root/logstash_writer_role
    src: logstash_writer_role.j2
    owner: root
    group: root
    mode: 0600
  delegate_to: "{{ elasticsearch_ca }}"
  run_once: true

- name: Place logstash_writer user configuration on ca node
  template:
    dest: /root/logstash_writer_user
    src: logstash_writer_user.j2
    owner: root
    group: root
    mode: 0600
  delegate_to: "{{ elasticsearch_ca }}"
  run_once: true

- name: fetch Elastic password
  shell: >
    grep "PASSWORD elastic" {{ elastic_initial_passwords }} |
    awk {' print $4 '}
  register: elastic_password_logstash
  changed_when: false
  delegate_to: "{{ elasticsearch_ca }}"
  tags:
    - configuration
    - logstash_configuration

- name: Check for logstash_writer role
  shell: >
    curl --cacert {{ elastic_ca_dir }}/ca.crt
    -u elastic:{{ elastic_password_logstash.stdout }}
    https://{{ elasticsearch_ca }}:9200/_security/role/logstash_writer
    | grep "enabled"
  delegate_to: "{{ elasticsearch_ca }}"
  failed_when: false
  changed_when: false
  register: logstash_writer_role_present
  run_once: true

- name: Put logstash_writer role into Elasticsearch
  command: >
    curl -T /root/logstash_writer_role --header 'Content-Type: application/json'
    --cacert {{ elastic_ca_dir }}/ca.crt
    -u elastic:{{ elastic_password_logstash.stdout }}
    https://{{ elasticsearch_ca }}:9200/_xpack/security/role/logstash_writer
  delegate_to: "{{ elasticsearch_ca }}"
  run_once: true
  when: logstash_writer_role_present.rc > 0

- name: Check for logstash_writer user
  shell: >
    curl --cacert {{ elastic_ca_dir }}/ca.crt
    -u elastic:{{ elastic_password_logstash.stdout }}
    https://{{ elasticsearch_ca }}:9200/_security/user/{{ logstash_user }}
    | grep "enabled"
  delegate_to: "{{ elasticsearch_ca }}"
  failed_when: false
  changed_when: false
  register: logstash_writer_user_present
  run_once: true

- name: Put logstash_writer user into Elasticsearch
  command: >
    curl -T /root/logstash_writer_user --header 'Content-Type: application/json'
    --cacert {{ elastic_ca_dir }}/ca.crt
    -u elastic:{{ elastic_password_logstash.stdout }}
    https://{{ elasticsearch_ca }}:9200/_xpack/security/user/{{ logstash_user }}
  delegate_to: "{{ elasticsearch_ca }}"
  run_once: true
  when: logstash_writer_user_present.rc > 0
