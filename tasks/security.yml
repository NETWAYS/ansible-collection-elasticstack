---
- name: check for bootstrap password
  shell: /usr/share/elasticsearch/bin/elasticsearch-keystore list
  changed_when: false
  register: es_keystore
- name: set bootstrap password
  shell: echo "{{ elasticsearch_bootstrap_pw }}" | /usr/share/elasticsearch/bin/elasticsearch-keystore add -x 'bootstrap.password'
  when: "'bootstrap.password' not in es_keystore.stdout_lines"
- name: configure ca
  shell: /usr/share/elasticsearch/bin/elasticsearch-certutil ca --pass {{ elastic_ca_pass }} --out /usr/share/elasticsearch/elastic-stack-ca.p12 --silent
  delegate_to: "{{ elasticsearch_ca }}"
  run_once: true
  args:
    creates: /usr/share/elasticsearch/elastic-stack-ca.p12
    # - name: create instances file
    #   template:
    #     src: instances.j2
    #     dest: /usr/share/elasticsearch/instances
    #     owner: root
    #     group: root
    #     mode: 0600
    #   delegate_to: "{{ elasticsearch_ca }}"
    # - name: generate individual certificate
    #   shell: /usr/share/elasticsearch/bin/elasticsearch-certutil cert ca /usr/share/elasticsearch/elastic-stack-ca.p12 --ca-pass {{ elastic_ca_pass }} 
    # 
- name: create individual certificates
  #shell: /usr/share/elasticsearch/bin/elasticsearch-certutil cert ca /usr/share/elasticsearch/elastic-stack-ca.p12 --ca-pass {{ elastic_ca_pass }} --name {{ ansible_hostname }} --ip {{ ansible_default_ipv4.address }} --pass {{ elastic_cert_pass }} --out /usr/share/elasticsearch/{{ ansible_hostname }}.p12
  shell: /usr/share/elasticsearch/bin/elasticsearch-certutil cert ca /usr/share/elasticsearch/elastic-stack-ca.p12 --ca-pass {{ elastic_ca_pass }} --name {{ ansible_hostname }} --ip {{ ansible_default_ipv4.address }} --pass "" --out /usr/share/elasticsearch/{{ ansible_hostname }}.p12
  delegate_to: "{{ elasticsearch_ca }}"
  args:
    creates: /usr/share/elasticsearch/{{ ansible_hostname }}.p12
    #- name: fetch certificates to local machine
    #  shell: cat /usr/share/elasticsearch/{{ ansible_hostname }}.p12
    #  register: elasticcert
    #  delegate_to: "{{  elasticsearch_ca }}"
    #- name: place certificate
    #  shell: echo "{{ elasticcert.stdout }}" > /etc/elasticsearch/{{ ansible_hostname }}.p12
- name: Fetch certificate from ca host to master
  fetch: src=/usr/share/elasticsearch/{{ ansible_hostname }}.p12 dest=/tmp/ flat=yes
  delegate_to: "{{ elasticsearch_ca }}"
- name: Create certificate directory
  file:
    state: directory
    path: /etc/elasticsearch/certs
    owner: root
    group: elasticsearch
    mode: 0750
- name: Copy the certificate to actual node
  copy: src=/tmp/{{ ansible_hostname }}.p12 dest=/etc/elasticsearch/certs
- name: Start Elasticsearch
  service:
    name: elasticsearch
    state: started
- name: Check for passwords being set
  stat:
    path: "/usr/share/elasticsearch/initial_passwords"
  delegate_to: "{{ elasticsearch_ca }}"
  register: elasticsearch_passwords_file
- name: Check for cluster status with bootstrap password
  shell: curl -ks https://elastic:{{ elasticsearch_bootstrap_pw }}@localhost:9200/_cluster/health?pretty | grep status | cut -d\" -f4
  register: es_cluster_status
  changed_when: false
  when: elasticsearch_passwords_file.stat.exists == False
- name: fetch Elastic password
  shell: grep "PASSWORD elastic" /usr/share/elasticsearch/initial_passwords | awk {' print $4 '}
  register: elastic_password
  changed_when: false
  delegate_to: "{{ elasticsearch_ca }}"
  when: elasticsearch_passwords_file.stat.exists
- name: Check for cluster status with elastic password
  shell: curl -ks https://elastic:{{ elastic_password.stdout }}@localhost:9200/_cluster/health?pretty | grep status | cut -d\" -f4
  register: es_cluster_status
  changed_when: false
  when: elasticsearch_passwords_file.stat.exists
- name: Fail if cluster is not ready yet
  fail:
    msg: "Elasticsearch cluster is not ready, yet. Please rerun again later."
  when: es_cluster_status.stdout != "green"
# ToDo: create file in secure directory
- name: Create initial passwords
  shell: /usr/share/elasticsearch/bin/elasticsearch-setup-passwords auto -b > /usr/share/elasticsearch/initial_passwords
  delegate_to: "{{ elasticsearch_ca }}"
  run_once: true
  args:
    creates: /usr/share/elasticsearch/initial_passwords
    

